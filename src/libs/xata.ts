// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "accounts",
    columns: [
      {
        name: "access_token",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "expires_at",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "id_token",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "provider",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "provider_account_id",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "refresh_token",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "scope",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "session_state",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "token_type",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "type",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "sessions",
    columns: [
      {
        name: "expires",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "session_token",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "users",
    columns: [
      {
        name: "activity",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "bio",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "email",
        type: "text",
        notNull: false,
        unique: true,
        defaultValue: null,
      },
      {
        name: "email_verified",
        type: "timestamp(3) without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "image",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "isBlocked",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
      },
      {
        name: "isVerified",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
      },
      {
        name: "name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "posts",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "username",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "verificationtokens",
    columns: [
      {
        name: "expires",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "identifier",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "token",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Accounts = InferredTypes["accounts"];
export type AccountsRecord = Accounts & XataRecord;

export type Sessions = InferredTypes["sessions"];
export type SessionsRecord = Sessions & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Verificationtokens = InferredTypes["verificationtokens"];
export type VerificationtokensRecord = Verificationtokens & XataRecord;

export type DatabaseSchema = {
  accounts: AccountsRecord;
  sessions: SessionsRecord;
  users: UsersRecord;
  verificationtokens: VerificationtokensRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://zaadevofc-uuq2nd.us-east-1.xata.sh/db/meefund",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
